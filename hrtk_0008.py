import tkinter as tk
import random
import pyttsx3
import threading

# ----------------------------------------
# Detect Hemant voice from available voices
# ----------------------------------------
temp_engine = pyttsx3.init()
voices = temp_engine.getProperty('voices')
hemant_voice_id = None

print("Available voices:")
for i, v in enumerate(voices):
    print(f"{i}: {v.name} - {v.id}")
    if "Hemant" in v.name:
        hemant_voice_id = v.id

if hemant_voice_id:
    print(f"\n‚úÖ 'Hemant' voice found and will be used: {hemant_voice_id}")
else:
    print("\n‚ö†Ô∏è 'Hemant' voice not found. Default voice will be used.")

# ----------------------------------------
# Hindi consonants and vowels (for Barakhadi)
# ----------------------------------------
consonants = [
    '‡§ï', '‡§ñ', '‡§ó', '‡§ò', '‡§ö', '‡§õ', '‡§ú', '‡§ù', '‡§ü', '‡§†', '‡§°', '‡§¢',
    '‡§§', '‡§•', '‡§¶', '‡§ß', '‡§®', '‡§™', '‡§´', '‡§¨', '‡§≠', '‡§Æ', '‡§Ø',
    '‡§∞', '‡§≤', '‡§µ', '‡§∂', '‡§∑', '‡§∏', '‡§π'
]

vowels = {
    '': '‡§Ö', '‡§æ': '‡§Ü', '‡§ø': '‡§á', '‡•Ä': '‡§à', '‡•Å': '‡§â', '‡•Ç': '‡§ä',
    '‡•á': '‡§è', '‡•à': '‡§ê', '‡•ã': '‡§ì', '‡•å': '‡§î', '‡§Ç': '‡§Ö‡§Ç', '‡§É': '‡§Ö‡§É'
}

translit = {
    '‡§ï': 'Ka', '‡§ñ': 'Kha', '‡§ó': 'Ga', '‡§ò': 'Gha', '‡§ö': 'Cha', '‡§õ': 'Chha',
    '‡§ú': 'Ja', '‡§ù': 'Jha', '‡§ü': 'Ta', '‡§†': 'Tha', '‡§°': 'Da', '‡§¢': 'Dha',
    '‡§§': 'Ta', '‡§•': 'Tha', '‡§¶': 'Da', '‡§ß': 'Dha', '‡§®': 'Na', '‡§™': 'Pa',
    '‡§´': 'Pha', '‡§¨': 'Ba', '‡§≠': 'Bha', '‡§Æ': 'Ma', '‡§Ø': 'Ya', '‡§∞': 'Ra',
    '‡§≤': 'La', '‡§µ': 'Va', '‡§∂': 'Sha', '‡§∑': 'Sha', '‡§∏': 'Sa', '‡§π': 'Ha',
    '‡§Ö': 'A', '‡§Ü': 'Aa', '‡§á': 'I', '‡§à': 'Ee', '‡§â': 'U', '‡§ä': 'Oo',
    '‡§è': 'E', '‡§ê': 'Ai', '‡§ì': 'O', '‡§î': 'Au', '‡§Ö‡§Ç': 'An', '‡§Ö‡§É': 'Ah'
}

barakhadi = [(c + m, c, v) for c in consonants for m, v in vowels.items()]
colors = ["#ff6666", "#33cc33", "#3399ff", "#ff9933", "#9933ff", "#ff33cc"]

# ----------------------------------------
# Global variable for current character
# ----------------------------------------
current = ('', '', '')

# ----------------------------------------
# Function to speak text using a fresh pyttsx3 engine
# ----------------------------------------
def speak_text(text):
    def run_speech():
        try:
            print(f"[Speech Triggered] Speaking: {text}")
            local_engine = pyttsx3.init()
            local_engine.setProperty('rate', 120)
            local_engine.setProperty('volume', 1.0)
            voice_id = hemant_voice_id if hemant_voice_id else voices[0].id
            local_engine.setProperty('voice', voice_id)

            print(f"[Voice Used] Voice ID: {voice_id}")
            print(f"[Engine Properties] Rate: {local_engine.getProperty('rate')}, Volume: {local_engine.getProperty('volume')}")
            print(f"[Engine Queue Before] InLoop: {getattr(local_engine, '_inLoop', 'Unknown')}")

            local_engine.say(text)
            local_engine.runAndWait()

            print(f"[Engine Queue After] InLoop: {getattr(local_engine, '_inLoop', 'Unknown')}")
            print("[Speech Completed]")
            status_label.config(text="‚úÖ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü")
        except Exception as e:
            print("[Speech Error]", e)
            status_label.config(text="‚ö†Ô∏è ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø")

    threading.Thread(target=run_speech, daemon=True).start()

# ----------------------------------------
# Function to show a random Barakhadi character
# ----------------------------------------
def show_random():
    global current
    current = random.choice(barakhadi)
    char, base, vowel = current
    print(f"[Next Word Clicked] Selected: {char} | Base: {base} | Vowel: {vowel}")
    label.config(text=char, fg=random.choice(colors))
    explain_label.config(text=f"{base} + {vowel} = {char}")
    explain_en_label.config(text=f"{translit.get(base, base)} + {translit.get(vowel, vowel)} = {translit.get(char, char)}")
    speak_barakhadi(char, base, vowel)

# ----------------------------------------
# Function to repeat current Barakhadi character
# ----------------------------------------
def repeat_speech():
    print(f"[Repeat Clicked] Repeating: {current}")
    speak_barakhadi(*current)

# ----------------------------------------
# Function to speak the Barakhadi explanation
# ----------------------------------------
def speak_barakhadi(char, base, vowel):
    phrase = f"{base} ‡§Ö‡§ß‡§ø‡§ï {vowel} ‡§¨‡§∞‡§æ‡§¨‡§∞ {char}"
    speak_text(phrase)

# ----------------------------------------
# GUI Setup
# ----------------------------------------
root = tk.Tk()
root.title("üéì ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§¨‡§æ‡§∞‡§æ‡§ñ‡§°‡§º‡•Ä ‡§∏‡•Ä‡§ñ‡•á‡§Ç üéì")
root.geometry("500x500")
root.config(bg="#e8f0fe")

title = tk.Label(root, text="üéì ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§¨‡§æ‡§∞‡§æ‡§ñ‡§°‡§º‡•Ä ‡§∏‡•Ä‡§ñ‡•á‡§Ç üéì", font=("Segoe UI", 24, "bold"), bg="#e8f0fe")
title.pack(pady=20)

label = tk.Label(root, text="", font=("Segoe UI", 100, "bold"), bg="#e8f0fe")
label.pack(pady=10)

explain_label = tk.Label(root, text="", font=("Segoe UI", 20), bg="#e8f0fe")
explain_label.pack(pady=5)

explain_en_label = tk.Label(root, text="", font=("Segoe UI", 16, "italic"), bg="#e8f0fe", fg="#555")
explain_en_label.pack(pady=5)

status_label = tk.Label(root, text="", font=("Segoe UI", 14), bg="#e8f0fe", fg="#333")
status_label.pack(pady=5)

btn_next = tk.Button(root, text="‚û°Ô∏è ‡§Ö‡§ó‡§≤‡§æ ‡§Ö‡§ï‡•ç‡§∑‡§∞", font=("Segoe UI", 18, "bold"),
                     bg="#4CAF50", fg="white", command=show_random)
btn_next.pack(pady=20)

btn_speak = tk.Button(root, text="üîä ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç", font=("Segoe UI", 16, "bold"),
                      bg="#3399ff", fg="white", command=repeat_speech)
btn_speak.pack(pady=5)

btn_exit = tk.Button(root, text="‚ùå ‡§¨‡§æ‡§π‡§∞ ‡§ú‡§æ‡§è‡§Ç", font=("Segoe UI", 14, "bold"),
                     bg="#f44336", fg="white", command=root.quit)
btn_exit.pack(pady=5)

show_random()
root.mainloop()